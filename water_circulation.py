# Water Circulation

from universe import *
from random import randint

###############################################
background = bytearray([0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x1e,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0xe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xf,0x6,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc1,0x2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0xf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x0,0x1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x0,0x1,0xbc,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x1,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x3d,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x7f,0x7b,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x8,0x49,0x2,0x7f,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0xb,0xf,0xbf,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x8,0xfb,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x3f,0xff,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x4,0xc6,0x3e,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x67,0x1b,0x8f,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x3,0xe6,0x3f,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x7,0xe8,0x11,0x61,0xef,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x10,0xc1,0xfc,0x1e,0xbd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x6,0x1,0xd2,0x1e,0xa,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x27,0x81,0xc8,0x7f,0xbf,0xbf,0xf7,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x1b,0xf9,0xe0,0x3f,0xfe,0x1d,0xf6,0x7f,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x5,0x7b,0xf0,0x5f,0xe4,0x0,0xf9,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x1,0xef,0xfd,0xcf,0xfb,0x18,0x7f,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x7f,0xff,0x87,0xfe,0xff,0x7f,0xff,0xff,0xff,0xfe,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0xff,0xcd,0xcf,0xb9,0xf7,0xff,0xff,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xff,0xff,0xff,0xfe,0xff,0xff,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xff,0xf0,0x0,0x3f,0xff,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xff,0xf8,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xdf,0xc0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x80,0x0,0x0,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x0,0x0,0x0,0x0,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xe0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x1,0x10,0x12,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x3,0xfd,0xfc,0xe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x4a,0x1f,0xff,0xf0,0xa2,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x1c,0x3f,0xff,0xe0,0x2,0xe0,0x70,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0xf,0x2f,0xff,0xf3,0xa1,0xe0,0x7e,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x3,0xcf,0xff,0xff,0xf1,0xc1,0xfc,0x7f,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x1f,0xff,0xff,0xff,0xd8,0x80,0xf8,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x78,0x3b,0xff,0xff,0xff,0xe0,0x1,0xf8,0xff,0x0,0x0,0x0,0x0,0x1,0x80,0x1,0xfc,0xf,0xff,0xff,0xff,0xe0,0x0,0xe4,0xff,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0xf0,0x3,0xff,0xff,0xff,0xc0,0x61,0xe2,0xff,0x0,0x0,0x0,0x0,0x2,0x0,0x1,0xe0,0x3,0xff,0xff,0xff,0x80,0x40,0xe2,0x7f,0x0,0x0,0x0,0x1c,0x2,0x0,0x1,0xc0,0x1e,0xff,0xff,0xff,0xe0,0x1,0xe0,0x7e,0x0,0x0,0x80,0x3c,0x8,0x0,0x0,0xc0,0x0,0x7f,0xff,0xff,0x80,0x1,0xf8,0xfe,0x0,0x3,0x80,0x3c,0xf,0x0,0x14,0x40,0xe,0x3f,0xff,0xff,0xe0,0x1,0xe1,0xf8])

###############################################
class WaterCirculation(Universe):
  def __init__(self, fps):
    super(WaterCirculation, self).__init__(fps, background)
    
    self.vapors = []
    self.falls = []
    self.reset(oled)
    
  def draw(self, ledscr, x, y, width, height):
    if self.status == 1:
      self.evaporate(ledscr, width, height)
    elif self.status == 2:
      self.rain(ledscr, width, height)
    else:
      self.snow(ledscr, width, height)
  
  def on_button_key(self, who, pressed):
    if pressed:
      if who == 'A':
        if self.status == 0 or (self.status == 1 and self.cloud_size == len(self.vapors)):
          self.status = 2
          self.cloud_size = len(self.vapors)
      elif who == 'B':
        if self.status == 0 or (self.status == 1 and self.cloud_size == len(self.vapors)):
          self.status = 3
          self.cloud_size = len(self.vapors)
      self.notify_updated()
    
  def on_touchpad_key(self, keyname, key_idx, pressed):
    if pressed:
      if self.status == 0 or self.status == 1:
        self.status = 1
        if len(self.vapors) < 256:
          oled_width, oled_height = self.get_window_size()
          span = oled_width // 6
          self.vapors.append((randint(0, span) + span * key_idx, oled_height))
          self.notify_updated()
  
  def evaporate(self, ledscr, width, height):
    for i in range(0, len(self.vapors)):
      x = self.vapors[i][0]
      y = self.vapors[i][1]
      
      if y > 0:
        x += randint(0, 2) - 1
        y -= 1
        self.vapors[i] = (x, y)
        ledscr.pixel(x, y, 1)
        
        if y == 0:
          self.cloud_size += 1
          ledscr.contrast(255 - self.cloud_size)
      else:
        ledscr.pixel(x, y, 0)
      
    if self.cloud_size == 255:
      self.status = randint(2, 3)
  
  def rain(self, ledscr, width, height):
    if len(self.falls) < self.cloud_size:
      self.falls.append((randint(0, width), 0))
    
    left = 0
    for i in range(0, len(self.falls)):
      x = self.falls[i][0]
      y = self.falls[i][1]
      
      if y < height:
        left += 1
        ledscr.vline(x, y, 3, 0)
        y += 4
        self.falls[i] = (x, y)
      
    if left == 0:
      self.reset(ledscr)
  
  def snow(self, ledscr, width, height):
    if len(self.falls) < self.cloud_size:
      self.falls.append((randint(0, width), 0))
    
    left = 0
    for i in range(0, len(self.falls)):
      x = self.falls[i][0]
      y = self.falls[i][1]
      
      if y < height:
        left += 1
        ledscr.fill_circle(x, y, 1, 0)
        x += randint(0, 2) - 2
        y += 2
        self.falls[i] = (x, y)
      
    if left == 0:
      self.reset(ledscr)
      
  def reset(self, ledscr):
    self.vapors.clear()
    self.falls.clear()
    self.status = 0
    self.cloud_size = 0
    ledscr.contrast(255)



###################################################################################################
if __name__ == "__main__":
  universe = WaterCirculation(24)
  universe.big_bang()
